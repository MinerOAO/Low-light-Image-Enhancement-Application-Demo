INFO:  Checking Bread_onnx_test.onnx for usability with ORT Mobile.
INFO:  Checking NNAPI
INFO:  13 partitions with a total of 180/409 nodes can be handled by the NNAPI EP.
INFO:  Partition sizes: [24, 18, 18, 24, 18, 18, 4, 6, 6, 18, 4, 18, 4]
INFO:  Unsupported nodes due to operator=46
INFO:  Unsupported nodes due to input having a dynamic shape=183
INFO:  Unsupported ops: ai.onnx:LeakyRelu,ai.onnx:Shape,ai.onnx:Split
DEBUG:  Caveats that have not been checked and may result in a node not being supported:  
     ai.onnx:Conv:Only 2D Conv is supported. Weights and bias should be constant.
     ai.onnx:Gather:Input indices should be constant if not int32 type.
     ai.onnx:GlobalAveragePool:Only 2D Pool is supported.
     ai.onnx:MaxPool:Only 2D Pool is supported.
     ai.onnx:Pad:Only constant mode Pad is supported. Input pads and constant_value should be constant. Input pads values should be non-negative.
     ai.onnx:Resize:Only 2D Resize is supported.
     ai.onnx:Unsqueeze:Input axes should be constant.
INFO:  NNAPI is not recommended with this model as there are 13 partitions covering 44.0% of the nodes in the model. This will most likely result in worse performance than just using the CPU EP.
INFO:  Model should perform well with NNAPI as is: NO
INFO:  Checking if model will perform better if the dynamic shapes are fixed...
INFO:  Partition information if the model was updated to make the shapes fixed:
INFO:  39 partitions with a total of 363/409 nodes can be handled by the NNAPI EP.
INFO:  Partition sizes: [18, 2, 1, 4, 1, 4, 1, 4, 1, 1, 21, 1, 1, 21, 1, 1, 21, 1, 17, 1, 4, 1, 4, 1, 4, 1, 1, 21, 1, 1, 21, 1, 1, 21, 1, 54, 40, 37, 25]
INFO:  Unsupported nodes due to operator=46
INFO:  Unsupported ops: ai.onnx:LeakyRelu,ai.onnx:Shape,ai.onnx:Split
DEBUG:  Caveats that have not been checked and may result in a node not being supported:  
     ai.onnx:Conv:Only 2D Conv is supported. Weights and bias should be constant.
     ai.onnx:Gather:Input indices should be constant if not int32 type.
     ai.onnx:GlobalAveragePool:Only 2D Pool is supported.
     ai.onnx:MaxPool:Only 2D Pool is supported.
     ai.onnx:Pad:Only constant mode Pad is supported. Input pads and constant_value should be constant. Input pads values should be non-negative.
     ai.onnx:Resize:Only 2D Resize is supported.
     ai.onnx:Unsqueeze:Input axes should be constant.
INFO:  NNAPI is not recommended with this model as there are 39 partitions covering 88.8% of the nodes in the model. This will most likely result in worse performance than just using the CPU EP.
INFO:  Model should perform well with NNAPI if modified to have fixed input shapes: NO
INFO:  Checking CoreML
INFO:  21 partitions with a total of 60/409 nodes can be handled by the CoreML EP.
INFO:  Partition sizes: [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 4, 4, 3, 2, 4, 3, 2, 4]
INFO:  Unsupported nodes due to operator=222
INFO:  Unsupported nodes due to input having a dynamic shape=127
INFO:  Unsupported ops: ai.onnx:Div,ai.onnx:Exp,ai.onnx:Gather,ai.onnx:LeakyRelu,ai.onnx:Mul,ai.onnx:Neg,ai.onnx:Pad,ai.onnx:Pow,ai.onnx:Shape,ai.onnx:Slice,ai.onnx:Split,ai.onnx:Sub,ai.onnx:Unsqueeze
DEBUG:  Caveats that have not been checked and may result in a node not being supported:  
     ai.onnx:Conv:Only 1D/2D Conv is supported. Weights and bias should be constant.
     ai.onnx:GlobalAveragePool:Only 2D Pool is supported.
     ai.onnx:MaxPool:Only 2D Pool is supported.
INFO:  CoreML is not recommended with this model as there are 21 partitions covering 14.7% of the nodes in the model. This will most likely result in worse performance than just using the CPU EP.
INFO:  Model should perform well with CoreML as is: NO
INFO:  Checking if model will perform better if the dynamic shapes are fixed...
INFO:  Partition information if the model was updated to make the shapes fixed:
INFO:  73 partitions with a total of 187/409 nodes can be handled by the CoreML EP.
INFO:  Partition sizes: [2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 3, 2, 4, 1, 2, 1, 2, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 2, 2, 1, 2, 12, 4, 10, 4, 10, 4, 1, 3, 2, 10, 4, 1, 3, 2, 10, 4, 2, 2, 3, 2, 2]
INFO:  Unsupported nodes due to operator=222
INFO:  Unsupported ops: ai.onnx:Div,ai.onnx:Exp,ai.onnx:Gather,ai.onnx:LeakyRelu,ai.onnx:Mul,ai.onnx:Neg,ai.onnx:Pad,ai.onnx:Pow,ai.onnx:Shape,ai.onnx:Slice,ai.onnx:Split,ai.onnx:Sub,ai.onnx:Unsqueeze
DEBUG:  Caveats that have not been checked and may result in a node not being supported:  
     ai.onnx:Conv:Only 1D/2D Conv is supported. Weights and bias should be constant.
     ai.onnx:GlobalAveragePool:Only 2D Pool is supported.
     ai.onnx:MaxPool:Only 2D Pool is supported.
INFO:  CoreML is not recommended with this model as there are 73 partitions covering 45.7% of the nodes in the model. This will most likely result in worse performance than just using the CPU EP.
INFO:  Model should perform well with CoreML if modified to have fixed input shapes: NO
INFO:  ---------------
INFO:  Checking if pre-built ORT Mobile package can be used with Bread_onnx_test.onnx once model is converted from ONNX to ORT format using onnxruntime.tools.convert_onnx_models_to_ort...
DEBUG:  Checking if the data types and operators used in the model are supported in the pre-built ORT package...
INFO:  Model should work with the pre-built package.
INFO:  ---------------

INFO:  Run `python -m onnxruntime.tools.convert_onnx_models_to_ort ...` to convert the ONNX model to ORT format. By default, the conversion tool will create an ORT format model with saved optimizations which can potentially be applied at runtime (with a .with_runtime_opt.ort file extension) for use with NNAPI or CoreML, and a fully optimized ORT format model (with a .ort file extension) for use with the CPU EP.
INFO:  For optimal performance the <model>.ort model should be used with the CPU EP. 